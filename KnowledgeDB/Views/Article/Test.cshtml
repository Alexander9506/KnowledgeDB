<div id="file-explorer" class="container">
    <div class="form-group row">
        <input id="file-explorer-search" class="form-control col-md-9" type="search" name="search" placeholder="Search" aria-label="Search" autocomplete="off"/>
        <input id="file-explorer-add-file" multiple type="file" class="d-none" />
        
        <button type="button" class="btn btn-outline-secondary col-md-2 ml-1" onclick="document.getElementById('file-explorer-add-file').click()">Add File</button>
    </div>

    <div id="file-explorer-settings" class="row">
        <span class="text-black-50 col">Settings</span>
        <div class="custom-control custom-switch col">
            <input type="checkbox" class="custom-control-input" id="file-explorer-cbox-only-new-files">
            <label class="custom-control-label" for="file-explorer-cbox-only-new-files">Only new uploaded Files</label>
        </div>
        <div class="custom-control custom-switch col">
            <input type="checkbox" class="custom-control-input" id="file-explorer-cbox-preview-images">
            <label class="custom-control-label" for="file-explorer-cbox-preview-images">Show preview images</label>
        </div>
    </div>

    <div>
        <ul id="file-explorer-files" class="list-group">
        </ul>
    </div>

    <button type="button" onclick="fileExplorer.loadServerFiles();">Load Server Images</button>
</div>

<script>
    //TODO: eigenes JS File

    function uuidv4() {
        return ([1e7] + -1e3 + -4e3 + -8e3 + -1e11).replace(/[018]/g, c =>
            (c ^ crypto.getRandomValues(new Uint8Array(1))[0] & 15 >> c / 4).toString(16)
        );
    }

    class FileExplorer {
        constructor(fileExplorerId) {
            this.fileExplorerId = fileExplorerId;
            this.fileList = [];

            this.ID_fileExplorerSearch = 'file-explorer-search';
            this.ID_fileExplorerAddFile = 'file-explorer-add-file';
            this.ID_fileExplorerSettings = 'file-explorer-settings';
            this.ID_fileExplorerCbxOnlyNewFiles = 'file-explorer-cbox-only-new-files';
            this.ID_fileExplorerCbxPreviewImages = 'file-explorer-cbox-preview-images';
            this.ID_fileExplorerFiles = 'file-explorer-files';

            this.UploadState_Added = "added";
            this.UploadState_OnUpload = "onUpload";
            this.UploadState_Uploaded= "uploaded";

            this.ImageUrl = null;
            this.Filter = {
                FileType: "image"
            }
            this.addListener();
        }

        addListener() {
            const fileAddButton = document.getElementById(this.ID_fileExplorerAddFile);
            const self = this;

            //New file added listener
            fileAddButton.onchange = function () {
                let newFiles = [];

                newFiles.push.apply(newFiles, this.files);
                self.addFiles(newFiles);

                //remove file from Input to ensure it can be uploaded again
                this.value = null;

            }

            const search = document.getElementById(this.ID_fileExplorerSearch);
            if (search != null) {
                search.addEventListener("input", function (e) {
                    let filteredFiles = self.filterFileListBySearch(self.fileList, search.value)
                    self.refreshFileView(filteredFiles);
                });
            }
        }

        getSearchString() {
            const search = document.getElementById(this.ID_fileExplorerSearch);
            if (search != null) {
                return search.value;
            }
            return null;
        }

        addFiles(files) {
            const self = this;
            const transformedFiles = files.map(function (f) {
                const id = self.generateFileId(f)
                return { file: f, fileId: id, guiId: id, uploadState: self.UploadState_Added};
            });
            this.fileList.push.apply(this.fileList, transformedFiles);
            this.refreshFileView(this.fileList);
        }

        generateFileId(file) {
            return uuidv4() + file.name;
        }

        getFileById(fileId) {
            for (let i = 0; i < this.fileList.length; i++) {
                let file = this.fileList[i];
                if (file.id === fileId) {
                    return file;
                }
            }
        }

        refreshFileView(files) {
            const fileListView = document.getElementById(this.ID_fileExplorerFiles);
            if (fileListView == null) {
                return;
            }
            //Delete all Contant in the List //TODO: make faster!!!
            fileListView.innerHTML = '';

            for (var i = 0; i < files.length; i++) {
                let newFileCard = this.createFileViewCard(files[i]);
                fileListView.appendChild(newFileCard);
            }
        }

        createFileViewCard(file) {
            let newRow = document.createElement('li');
            newRow.dataset.fileId = file.fileId;
            newRow.className = 'justify-content-between list-group-item d-flex justify-content-between';

            
            let colActions = document.createElement('div');
            let colName = document.createElement('div');

            let previewImage = document.createElement('img');
            if ('URL' in file) {
                previewImage.src = file.URL+ "?width=80&height=80&keepRatio=true";
            }

            colName.appendChild(previewImage);
            colName.appendChild(this.createName(file));

            //Add CopyUrl Button
            if ('URL' in file) {
                colActions.appendChild(this.createCopyURLButton(file));
            }

            //Add upload button
            if (file.uploadState === this.UploadState_Added) {
                colActions.appendChild(this.createUploadButton(file));
            }

            //Add remove button
            colActions.appendChild(this.createRemoveButton(file));

            newRow.appendChild(colName);
            newRow.appendChild(colActions);

            return newRow;
        }

        createName(file) {
            let colName;
            if ('URL' in file) {
                //file name as link if URL is provided
                colName = document.createElement('a');
                colName.href = file.URL;
            } else {
                //only file name if no URL
                colName = document.createElement('span');
            }
            colName.textContent = file.file.name;

            return colName;
        }

        createRemoveButton(file) {
            let self = this;
            let removeButton = createImageButton("fas fa-trash", "btn btn-outline-danger m-1", "Remove")
            removeButton.onclick = function () {
                if (file.fileId > 0) {
                    self.deleteFileOnServer(file, (f) => self.deleteFileLocal(f));
                } else {
                    self.deleteFileLocal(file);
                }
            }
            return removeButton;
        }

        createUploadButton(file) {
            const self = this;
            let uploadButton = createImageButton("fas fa-upload", "btn btn-outline-info m-1", "Upload")
            uploadButton.onclick = function () {
                const newImage = replaceButtonWithImage(this, "fa fa-spinner fa-spin m-3")
                file.uploadState = self.UploadState_OnUpload;

                if (self.UploadUrl != null) {
                    let formData = self.createUploadFormData([file]);
                    UploadFormData(formData, self.UploadUrl, function (success) {
                        ChangeImage(newImage, "fa fa-check m-3");

                        //ChangeUpload State
                        file.uploadState = self.UploadState_Uploaded;

                        //switchout check with copy url Button
                        setTimeout(
                            function () {
                                self.loadServerFiles();
                            }, 1000);
                    });
                } else {
                    console.error("No Upload URL defined");
                }
            }
            return uploadButton;
        }

        createCopyURLButton(file) {
            const buttonCopyUrl = createImageButton("far fa-copy", "btn btn-outline-info m-1", "Copy to Clipboard")
            buttonCopyUrl.onclick = function () {
                copyToClipboard(file.URL);
            };
            return buttonCopyUrl;
        }

        deleteFileLocal(file) {
            this.fileList = this.fileList.filter(f => f.fileId !== file.fileId);

            let filteredBySearch = this.filterFileListBySearch(this.fileList, this.getSearchString());
            this.refreshFileView(filteredBySearch);
        }

        filterFileListBySearch(fileList, search) {
            if (fileList != null && search != null) {
                let searchSplit = search.split(" ");
                let filteredList = fileList.filter(f => {
                    //check if any searchstring matches
                    for (var i = 0; i < searchSplit.length; i++) {
                        if (f.file.name.toLowerCase().includes(searchSplit[i])) {
                            return true;
                        }
                    }
                    return false;
                });
                return filteredList;
            } else {
                return fileList;
            }
        }

        async deleteFileOnServer(file, onFileDelete) {
            if (file == null || this.DeleteFileUrl == null) {
                return;
            }

            let formData = new FormData();
            formData.append("id", file.fileId)
            try {
                const response = await fetch(this.DeleteFileUrl, {
                    method: "POST",
                    body:formData
                });
                if (response.ok) {
                    if (onFileDelete != null) {
                        onFileDelete(file);
                    }
                }
            } catch (error) {
                console.error('Error', error);
            }
        }

        async loadServerFiles() {
            const self = this;
            if (this.ImageUrl != null) {
                try {
                    const response = await fetch(this.ImageUrl, {
                        method: 'Post',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        //Only Show Images
                        body: JSON.stringify(self.filter)
                    })

                    if (response.ok) {
                        let rawJson = response.json();
                        rawJson.then(function (json) {
                            const serverFiles = json;
                            const transformedFiles = serverFiles.map(function (fc) {
                                return {
                                    file: { name: fc.displayName }, fileId: fc.id, guiId: fc.id, uploadState: self.UploadState_Uploaded, URL: fc.fileUrl };
                            });
                            //remove all local files from the "server"
                            self.fileList = self.fileList.filter(f => f.uploadState === self.UploadState_Added || f.uploadState === self.UploadState_OnUpload);
                            //add new loaded server files
                            self.fileList.push.apply(self.fileList, transformedFiles);

                            let filteredBySearch = self.filterFileListBySearch(self.fileList, self.getSearchString());
                            self.refreshFileView(filteredBySearch);
                        })
                    }
                } catch (error) {
                    console.error('Error', error);
                }
            }
        }

        createUploadFormData(files) {
            const formData = new FormData();
            for (var i = 0; i < files.length; i++) {
                //needed to supply multiple Objects from same type to asp.net controller
                formData.append("Files[" + i + "].FormFile", files[i].file);

                let guiid = files[i].guiId;
                if (guiid == null) {
                    guiid = "";
                }
                //needed to supply multiple Objects from same type to asp.net controller
                formData.append("Files[" + i + "].GUIID", guiid);
            }
            return formData;
        }
    }

    const fileExplorer = new FileExplorer('file-explorer');
    fileExplorer.ImageUrl = "@Url.Action("GetFiles", "File")";
    fileExplorer.DeleteFileUrl = "@Url.Action("DeleteFile", "File")";
    fileExplorer.UploadUrl = "@Url.Action("UploadFiles", "File")";
    fileExplorer.loadServerFiles();

    //TODO: tidy up

    function replaceButtonWithImage(button, imageClasses) {
        const buttonParent = button.parentElement;
        if (buttonParent != null) {
            const image = document.createElement('i')
            image.className = imageClasses

            buttonParent.insertBefore(image, button);
            buttonParent.removeChild(button);

            return image;
        }
    }

    function ChangeImage(image, imageClasses) {
        if (image != null) {
            image.className = imageClasses;
        }
    }

    function createImageButton(imageClasses, buttonClasses, buttonTitle) {
        let button = document.createElement('button');
        let image = document.createElement('i');

        image.className = imageClasses;
        button.title = buttonTitle;
        button.className = buttonClasses
        button.appendChild(image);

        return button;
    }


</script>

