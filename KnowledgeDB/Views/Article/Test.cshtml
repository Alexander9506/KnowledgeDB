<div id="file-explorer" class="container">
    <div class="form-group row">
        <input id="file-explorer-search" class="form-control col-md-7" type="search" name="search" placeholder="Search" aria-label="Search" autocomplete="off"/>
        <button id="file-explorer-search-btn" type="button" class="btn btn-outline-success col-md-2 ml-1">Search</button>
        <input id="file-explorer-add-file" multiple type="file" class="d-none" />
        
        <button type="button" class="btn btn-outline-secondary col-md-2 ml-1" onclick="document.getElementById('file-explorer-add-file').click()">Add File</button>

        
    </div>

    <div id="file-explorer-settings" class="row">
        <span class="text-black-50 col">Settings</span>
        <div class="custom-control custom-switch col">
            <input type="checkbox" class="custom-control-input" id="file-explorer-cbox-only-new-files">
            <label class="custom-control-label" for="file-explorer-cbox-only-new-files">Only new uploaded Files</label>
        </div>
        <div class="custom-control custom-switch col">
            <input type="checkbox" class="custom-control-input" id="file-explorer-cbox-preview-images">
            <label class="custom-control-label" for="file-explorer-cbox-preview-images">Show preview images</label>
        </div>
    </div>

    <div>
        <ul id="file-explorer-files" class="list-group">
        </ul>
    </div>

    <button type="button" onclick="fileExplorer.loadServerImages();">Load Server Images</button>
</div>

<script>
    //TODO: eigenes JS File

    function uuidv4() {
        return ([1e7] + -1e3 + -4e3 + -8e3 + -1e11).replace(/[018]/g, c =>
            (c ^ crypto.getRandomValues(new Uint8Array(1))[0] & 15 >> c / 4).toString(16)
        );
    }

    class FileExplorer {
        constructor(fileExplorerId) {
            this.fileExplorerId = fileExplorerId;
            this.fileList = [];

            this.ID_fileExplorerSearch = 'file-explorer-search';
            this.ID_fileExplorerSearchBtn = 'file-explorer-search-btn';
            this.ID_fileExplorerAddFile = 'file-explorer-add-file';
            this.ID_fileExplorerSettings = 'file-explorer-settings';
            this.ID_fileExplorerCbxOnlyNewFiles = 'file-explorer-cbox-only-new-files';
            this.ID_fileExplorerCbxPreviewImages = 'file-explorer-cbox-preview-images';
            this.ID_fileExplorerFiles = 'file-explorer-files';

            this.UploadState_Added = "added";
            this.UploadState_OnUpload = "onUpload";
            this.UploadState_Uploaded= "uploaded";

            this.ImageUrl = null;

            this.addListener();
        }

        addListener() {
            const fileAddButton = document.getElementById(this.ID_fileExplorerAddFile);
            const self = this;
            fileAddButton.onchange = function () {
                let newFiles = [];

                newFiles.push.apply(newFiles, this.files);
                self.addFiles(newFiles);
            }
        }

        addFiles(files) {
            const self = this;
            const transformedFiles = files.map(function (f) {
                return { file: f, fileId: self.generateFileId(f), uploadState: self.UploadState_Added};
            });
            this.fileList.push.apply(this.fileList, transformedFiles);
            this.refreshFileView(this.fileList);
        }

        generateFileId(file) {
            return uuidv4() + file.name;
        }

        getFileById(fileId) {
            for (let i = 0; i < this.fileList.length; i++) {
                let file = this.fileList[i];
                if (file.id === fileId) {
                    return file;
                }
            }
        }

        refreshFileView(files) {
            const fileListView = document.getElementById(this.ID_fileExplorerFiles);
            if (fileListView == null) {
                return;
            }
            //Delete all Contant in the List //TODO: make faster!!!
            fileListView.innerHTML = '';

            for (var i = 0; i < files.length; i++) {
                let newFileCard = this.createFileViewCard(files[i]);
                fileListView.appendChild(newFileCard);
            }
        }

        createFileViewCard(file) {
            const self = this;
            let currentFile = file;

            let newRow = document.createElement('li');
            let colName;

            if ('URL' in currentFile) {
                colName = document.createElement('a');
                colName.href = currentFile.URL;
            } else {
                colName = document.createElement('span');
            }

            let colActions = document.createElement('div');

            newRow.dataset.fileId = file.fileId;
            newRow.className = 'justify-content-between list-group-item d-flex justify-content-between';

            colName.textContent = file.file.name;

            if (currentFile.uploadState === self.UploadState_Added) {
                let buttonUpload = createImageButton("fas fa-upload", "btn btn-outline-info m-1", "Upload")
                buttonUpload.onclick = function () {
                const newImage = replaceButtonWithImage(this, "fa fa-spinner fa-spin m-3")
                currentFile.uploadState = self.UploadState_OnUpload;

                UploadFiles([currentFile.file], uploadAction, function (success) {
                    console.log("Ready");
                    ChangeImage(newImage, "fa fa-check m-3");
                    //ChangeUpload State
                    currentFile.uploadState = self.UploadState_Uploaded;
                });
            }
                colActions.appendChild(buttonUpload);
            }

            let buttonRemove = createImageButton("fas fa-trash", "btn btn-outline-danger m-1", "Remove")
            colActions.appendChild(buttonRemove);

            newRow.appendChild(colName);
            newRow.appendChild(colActions);

            return newRow;
        }

        async loadServerImages() {
            const self = this;
            if (this.ImageUrl != null) {
                try {
                    const response = await fetch(this.ImageUrl, {
                        method: 'GET',
                    })

                    if (response.ok) {
                        let rawJson = response.json();
                        rawJson.then(function (json) {
                            console.log(JSON.stringify(json));
                            const serverFiles = json;
                            const transformedFiles = serverFiles.map(function (fc) {
                                return {
                                    file: { name: fc.displayName }, fileId: fc.id, uploadState: self.UploadState_Uploaded, URL: fc.fileUrl };
                            });
                            self.fileList.push.apply(self.fileList, transformedFiles);
                            self.refreshFileView(self.fileList);

                        })
                    }
                } catch (error) {
                    console.error('Error', error);
                }
            }
        }
    }

    const fileExplorer = new FileExplorer('file-explorer');
    fileExplorer.ImageUrl = "@Url.Action("GetImages", "File")";

    //TODO: Anders machen
    let uploadAction = "@Url.Action("UploadFiles", "File")";

    function replaceButtonWithImage(button, imageClasses) {
        const buttonParent = button.parentElement;
        if (buttonParent != null) {
            const image = document.createElement('i')
            image.className = imageClasses

            buttonParent.insertBefore(image, button);
            buttonParent.removeChild(button);

            return image;
        }
    }

    function ChangeImage(image, imageClasses) {
        if (image != null) {
            image.className = imageClasses;
        }
    }

    function createImageButton(imageClasses, buttonClasses, buttonTitle) {
        let button = document.createElement('button');
        let image = document.createElement('i');

        image.className = imageClasses;
        button.title = buttonTitle;
        button.className = buttonClasses
        button.appendChild(image);

        return button;
    }


</script>

